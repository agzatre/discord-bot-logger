from typing import Optional, Dict

import disnake
from disnake.ext import commands

from utils.database import Database


class BotSettingsView(disnake.ui.View):
    def __init__(self, bot: commands.Bot, db: Database, guild: disnake.Guild):
        super().__init__(timeout=None)
        self.bot = bot
        self.db = db
        self.guild = guild
        self.current_settings: Optional[Dict] = None

    async def get_settings(self) -> Dict:
        if not self.current_settings:
            self.current_settings = await self.db.get_log_settings(self.guild.id) or {
                "log_channel_id": 0,
                "logging_enabled": False,
                "log_types": "message:0,invite:0,server:0,voice:0,user:0"
            }
        return self.current_settings

    @disnake.ui.button(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", style=disnake.ButtonStyle.blurple, row=0)
    async def settings_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        settings = await self.get_settings()

        embed = disnake.Embed(
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
            color=0x2b2d31
        )

        status = "–í–∫–ª—é—á–µ–Ω–æ" if settings.get("logging_enabled", False) else "–í—ã–∫–ª—é—á–µ–Ω–æ"
        embed.add_field(name="–°—Ç–∞—Ç—É—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", value=status, inline=False)

        log_channel = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        if settings.get("log_channel_id", 0):
            channel = self.guild.get_channel(settings["log_channel_id"])
            log_channel = channel.mention if channel else "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        embed.add_field(name="–õ–æ–≥-–∫–∞–Ω–∞–ª", value=log_channel, inline=False)

        view = disnake.ui.View()
        view.add_item(LogChannelSelect(self.db, self.guild))

        logging_enabled = settings.get("logging_enabled", False)
        toggle_button = ToggleLoggingButton(self.db, self.guild, logging_enabled)
        view.add_item(toggle_button)

        if logging_enabled:
            view.add_item(DetailedSettingsButton(self.db, self.guild))

        view.add_item(BackButton(self.db, self.guild))

        await inter.response.edit_message(embed=embed, view=view)

    @disnake.ui.button(label="GitHub", style=disnake.ButtonStyle.link, row=0,
                       url="https://github.com/agzatre/discord-logger-bot")
    async def github_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        pass


class LogChannelSelect(disnake.ui.ChannelSelect):
    def __init__(self, db: Database, guild: disnake.Guild):
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤",
            channel_types=[disnake.ChannelType.text],
            min_values=1,
            max_values=1
        )
        self.db = db
        self.guild = guild

    async def callback(self, inter: disnake.MessageInteraction):
        channel_id = self.values[0].id
        await self.db.set_log_channel(self.guild.id, channel_id)

        embed = disnake.Embed(
            title="–õ–æ–≥-–∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            description=f"–ö–∞–Ω–∞–ª {self.values[0].mention} —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ª–æ–≥–æ–≤",
            color=0x2b2d31
        )

        await inter.response.edit_message(embed=embed)


class ToggleLoggingButton(disnake.ui.Button):
    def __init__(self, db: Database, guild: disnake.Guild, is_enabled: bool):
        self.db = db
        self.guild = guild

        if is_enabled:
            super().__init__(
                label="–í—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                style=disnake.ButtonStyle.red
            )
        else:
            super().__init__(
                label="–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                style=disnake.ButtonStyle.green
            )

    async def callback(self, inter: disnake.MessageInteraction):
        settings = await self.db.get_log_settings(self.guild.id) or {}
        current_status = settings.get("logging_enabled", False)
        new_status = not current_status

        await self.db.set_logging_enabled(self.guild.id, new_status)

        if new_status:
            self.label = "–í—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
            self.style = disnake.ButtonStyle.red
        else:
            self.label = "–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
            self.style = disnake.ButtonStyle.green

        embed = disnake.Embed(
            title="–°—Ç–∞—Ç—É—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω",
            description=f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å {'–≤–∫–ª—é—á–µ–Ω–æ' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}",
            color=0x2b2d31
        )

        view = disnake.ui.View()
        view.add_item(LogChannelSelect(self.db, self.guild))
        view.add_item(self)

        if new_status:
            view.add_item(DetailedSettingsButton(self.db, self.guild))

        view.add_item(BackButton(self.db, self.guild))

        await inter.response.edit_message(embed=embed, view=view)


class DetailedSettingsButton(disnake.ui.Button):
    def __init__(self, db: Database, guild: disnake.Guild):
        super().__init__(
            label="–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            style=disnake.ButtonStyle.grey
        )
        self.db = db
        self.guild = guild

    async def callback(self, inter: disnake.MessageInteraction):
        settings = await self.db.get_log_settings(self.guild.id) or {}
        log_types = settings.get("log_types", "message:0,invite:0,server:0,voice:0,user:0")

        types = {}
        for pair in log_types.split(","):
            k, v = pair.split(":")
            types[k] = v == "1"

        embed = disnake.Embed(
            title="–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
            color=0x2b2d31
        )

        categories = {
            "message": {
                "name": "üìù –°–æ–æ–±—â–µ–Ω–∏—è",
                "description": (
                    "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ç.—á. –º–∞—Å—Å–æ–≤–æ–µ)\n"
                    "‚Ä¢ –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                    "‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"
                )
            },
            "voice": {
                "name": "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã",
                "description": (
                    "‚Ä¢ –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
                    "‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏\n"
                    "‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞\n"
                    "‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞\n"
                    "‚Ä¢ Stage-–∏–≤–µ–Ω—Ç—ã (—Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)"
                )
            },
            "server": {
                "name": "üè∞ –°–µ—Ä–≤–µ—Ä",
                "description": (
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
                    "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤"
                )
            },
            "user": {
                "name": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "description": (
                    "‚Ä¢ –ó–∞—Ö–æ–¥/–≤—ã—Ö–æ–¥ —Å —Å–µ—Ä–≤–µ—Ä–∞\n"
                    "‚Ä¢ –ë–∞–Ω/—Ä–∞–∑–±–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                    "‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∏ —Ä–æ–ª–µ–π"
                )
            },
            "invite": {
                "name": "üì© –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
                "description": (
                    "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
                    "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"
                )
            }
        }

        for log_type, data in categories.items():
            embed.add_field(
                name=data["name"],
                value=f"```{data['description']}```",
                inline=False
            )

        view = disnake.ui.View()

        for log_type, data in categories.items():
            view.add_item(LogTypeToggleButton(
                data["name"].split(" ")[1],  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏
                log_type,
                types.get(log_type, False),
                self.db,
                self.guild
            ))

        view.add_item(BackButton(self.db, self.guild, back_to="settings"))

        await inter.response.edit_message(embed=embed, view=view)


class LogTypeToggleButton(disnake.ui.Button):
    def __init__(self, label: str, log_type: str, is_enabled: bool, db: Database, guild: disnake.Guild):
        self.log_type = log_type
        self.db = db
        self.guild = guild

        super().__init__(
            label=label,
            style=disnake.ButtonStyle.green if is_enabled else disnake.ButtonStyle.red
        )

    async def callback(self, inter: disnake.MessageInteraction):
        settings = await self.db.get_log_settings(self.guild.id) or {}
        log_types = settings.get("log_types", "message:0,invite:0,server:0,voice:0,user:0")

        types = {}
        for pair in log_types.split(","):
            k, v = pair.split(":")
            types[k] = v

        current_value = types.get(self.log_type, "0")
        types[self.log_type] = "1" if current_value == "0" else "0"

        new_types = ",".join([f"{k}:{v}" for k, v in types.items()])
        await self.db.set_log_types(self.guild.id, new_types)

        self.style = disnake.ButtonStyle.green if types[self.log_type] == "1" else disnake.ButtonStyle.red
        await inter.response.edit_message(view=self.view)


class BackButton(disnake.ui.Button):
    def __init__(self, db: Database, guild: disnake.Guild, back_to: str = "main"):
        self.db = db
        self.guild = guild
        self.back_to = back_to
        super().__init__(
            label="–ù–∞–∑–∞–¥",
            style=disnake.ButtonStyle.grey
        )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.back_to == "main":
            embed = disnake.Embed(
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞",
                description='–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
                color=0x2b2d31
            )
            embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="`agzatre`", inline=True)
            embed.add_field(name="–í–µ—Ä—Å–∏—è", value="1.0.0", inline=True)
            embed.set_footer(text="¬© 2024 agzatre")
            embed.set_author(icon_url=inter.guild.icon.url if inter.guild.icon else None, name=inter.guild.name)
            embed.set_thumbnail(url=inter.bot.user.avatar.url if inter.bot.user.avatar else None)

            view = BotSettingsView(inter.bot, self.db, inter.guild)
            await inter.response.edit_message(embed=embed, view=view)
        else:
            settings = await self.db.get_log_settings(inter.guild.id) or {}

            embed = disnake.Embed(
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                color=0x2b2d31
            )

            status = "–í–∫–ª—é—á–µ–Ω–æ" if settings.get("logging_enabled", False) else "–í—ã–∫–ª—é—á–µ–Ω–æ"
            embed.add_field(name="–°—Ç–∞—Ç—É—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", value=status, inline=False)

            log_channel = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            if settings.get("log_channel_id", 0):
                channel = inter.guild.get_channel(settings["log_channel_id"])
                log_channel = channel.mention if channel else "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            embed.add_field(name="–õ–æ–≥-–∫–∞–Ω–∞–ª", value=log_channel, inline=False)

            view = disnake.ui.View()
            view.add_item(LogChannelSelect(self.db, inter.guild))

            toggle_button = ToggleLoggingButton(self.db, inter.guild, settings.get("logging_enabled", False))
            view.add_item(toggle_button)

            if settings.get("logging_enabled", False):
                view.add_item(DetailedSettingsButton(self.db, inter.guild))

            view.add_item(BackButton(self.db, inter.guild))

            await inter.response.edit_message(embed=embed, view=view)
